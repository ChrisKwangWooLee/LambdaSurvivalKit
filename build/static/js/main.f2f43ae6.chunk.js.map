{"version":3,"sources":["components/Clock.js","components/LSK_Header.js","components/LSK_Nav.js","BookmarkData.js","components/Bookmark.js","App.js","serviceWorker.js","index.js"],"names":["Clock","date","Date","utc_offset","getTimezoneOffset","setMinutes","getMinutes","lambdaTime","ampm","dateArr","toString","split","dayOfWeek","dow","hour","Number","minutes","newHour","workday","worktime","setClockColor","color","className","style","LSK_Header","Line","styled","div","src","alt","LSK_Nav","handleBookmarks","onClick","event","icon","faHtml5","fontSize","textAlign","faCss3Alt","faJsSquare","BookmarkData","results","id","name","category","subcategory","url","Bookmark","bookmarkData","console","log","href","target","App","useState","bookmarks","BookmarksContainer","map","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0QA8DeA,MA5Df,WAGI,IAAIC,EAAO,IAAIC,KACXC,EAAaF,EAAKG,oBACtBH,EAAKI,WAAWJ,EAAKK,aAAeH,GAEpCF,EAAKI,WAAWJ,EAAKK,cADL,KAIhB,IAQQC,EACAC,EATJC,EAAUR,EAAKS,WAAWC,MAAM,KAE5BC,EAAYH,EAAQ,GAGpBI,EAAMJ,EAAQ,GACdK,EAAOC,OAAON,EAAQ,GAAGE,MAAM,KAAK,IACpCK,EAAUP,EAAQ,GAAGE,MAAM,KAAK,GAGhCG,GAAQ,GAAKA,EAAO,IACpBN,EAAO,KACPD,EAAU,UAAMO,EAAKJ,WAAX,YAAyBM,EAAzB,OAGVR,EAAO,KACPD,EAAU,WAFVO,GAAc,IAEOJ,WAAX,YAAyBM,IAK3C,IAAIC,EAAUF,OAAON,EAAQ,GAAGE,MAAM,KAAK,IACvCO,EAAmB,QAARL,GAAyB,QAARA,GAAyB,QAARA,GAAyB,SAARA,GAA0B,QAARA,EAChFM,EAAYF,GAAW,GAAKA,GAAW,GAE3C,SAASG,EAAcF,EAASC,GAC5B,OAAID,GAAWC,EACJ,CACHE,MAAO,WAGJ,CACHA,MAAO,WAInB,OACI,yBAAKC,UAAU,gBACX,uBAAGA,UAAU,mBACVC,MAAOH,EAAcF,EAASC,IACzBP,GAER,uBAAGU,UAAU,cAAcC,MAAOH,EAAcF,EAASC,IACpDZ,EACD,0BAAMgB,MAAOH,EAAcF,EAASC,IAAYX,M,qFC/BjDgB,MAlBf,WAEI,IAAMC,EAAOC,IAAOC,IAAV,KAIV,OACI,gCACI,yBAAKL,UAAU,0BACX,yBAAKM,IAAI,kBAAkBC,IAAI,kBAAkBP,UAAU,cAC3D,4BAAI,0BAAMA,UAAU,eAAhB,UAAJ,iBAA6D,0BAAMA,UAAU,WAAhB,YAC7D,kBAACG,EAAD,CAAMH,UAAU,SAChB,kBAAC,EAAD,S,cCgCDQ,MA3Cf,YAAqC,IAAnBC,EAAkB,EAAlBA,gBAEd,OACI,yBAAKT,UAAU,oBACP,yBAAKA,UAAU,mBAAmBU,QAAS,SAAAC,GAAK,OAAIF,EAAgBE,KAC5D,kBAAC,IAAD,CAAiBC,KAAMC,IACPb,UAAU,OACVC,MAAO,CACKF,MAAO,UACPe,SAAU,OACVC,UAAW,YAEvC,wBAAIf,UAAU,QAAd,SAER,yBAAKA,UAAU,gBACf,yBAAKA,UAAU,yBACX,kBAAC,IAAD,CAAiBY,KAAMI,IACNf,MAAO,CACJF,MAAO,UACPe,SAAU,OACVC,UAAW,YAE/B,uCAEJ,yBAAKf,UAAU,gBACf,yBAAKA,UAAU,0BACX,kBAAC,IAAD,CAAiBY,KAAMK,IACNhB,MAAO,CACJF,MAAO,UACPe,SAAU,OACVC,UAAW,YAE/B,2CAEJ,yBAAKf,UAAU,gBACf,yBAAKA,UAAU,sBACX,yBAAKM,IAAI,kBAAkBC,IAAI,sBAC/B,yCC5CPW,EAAe,CACxBC,QAAS,CACP,CACEC,GAAI,IACJC,KAAM,eACNC,SAAU,OACVC,YAAa,aACbC,IAAK,6BAEP,CACEJ,GAAI,IACJC,KAAM,oBACNC,SAAU,OACVC,YAAa,gBACbC,IAAK,qDAEP,CACEJ,GAAI,IACJC,KAAM,wBACNC,SAAU,YACVC,YAAa,aACbC,IAAK,8CAEP,CACEJ,GAAI,IACJC,KAAM,eACNC,SAAU,YACVC,YAAa,aACbC,IAAK,2CAEP,CACEJ,GAAI,IACJC,KAAM,mBACNC,SAAU,YACVC,YAAa,gBACbC,IAAK,2DAEP,CACEJ,GAAI,IACJC,KAAM,0BACNC,SAAU,KACVC,YAAa,gBACbC,IAAK,2DAEP,CACEJ,GAAI,IACJC,KAAM,iBACNC,SAAU,KACVC,YAAa,gBACbC,IAAK,eAEP,CACEJ,GAAI,IACJC,KAAM,aACNC,SAAU,KACVC,YAAa,aACbC,IAAK,0BAEP,CACEJ,GAAI,IACJC,KAAM,eACNC,SAAU,SACVC,YAAa,QACbC,IAAK,mCAEP,CACEJ,GAAI,KACJC,KAAM,yBACNC,SAAU,SACVC,YAAa,QACbC,IAAK,oIAEP,CACEJ,GAAI,KACJC,KAAM,kBACNC,SAAU,SACVC,YAAa,aACbC,IAAK,6IClEEC,MATf,YAAmC,IAAhBC,EAAe,EAAfA,aAEf,OADAC,QAAQC,IAAIF,GAER,yBAAK1B,UAAU,sBACX,uBAAG6B,KAAMH,EAAaF,IAAKM,OAAO,UAAS,4BAAKJ,EAAaL,S,6ECiC1DU,MA9Bf,WAAgB,IAAD,EAEqBC,mBAASd,EAAaC,SAF3C,mBAENc,EAFM,UAIbN,QAAQC,IAAIK,GAOZ,IAAMC,EAAqB9B,IAAOC,IAAV,KAIxB,OACE,yBAAKL,UAAU,aACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAASS,gBAZb,SAAyBE,GACvBgB,QAAQC,IAAIjB,EAAMmB,WAchB,kBAACI,EAAD,CAAoBlC,UAAU,sBAC3BiC,EAAUE,KAAI,SAAAT,GACb,OAAO,kBAAC,EAAD,CAAUU,IAAKV,EAAaN,GAAIM,aAAcA,UCrB3CW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f2f43ae6.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Clock() {\n\n    // Convert local time -> UTC time -> SF time\n    var date = new Date();    \n    var utc_offset = date.getTimezoneOffset();\n    date.setMinutes(date.getMinutes() + utc_offset);\n    var sf_offset = 8 * 60 * (-1);\n    date.setMinutes(date.getMinutes() + sf_offset);\n    \n    // Set clock variables\n    let dateArr = date.toString().split(' ');\n        // set Day of week\n        let dayOfWeek = dateArr[0];\n\n        // set AM/PM and time\n        let dow = dateArr[0];\n        let hour = Number(dateArr[4].split(':')[0]);\n        let minutes = dateArr[4].split(':')[1];\n        let lambdaTime;\n        let ampm;\n        if (hour >= 0 && hour < 12) {\n            ampm = 'AM';\n            lambdaTime = `${hour.toString()}:${minutes} `;\n        } else {\n            hour = hour - 12;\n            ampm = 'PM';\n            lambdaTime = `${hour.toString()}:${minutes}`;\n        }\n\n    // Change color of clock test based on time\n    // Work day (Monday - Friday) / Work time (8am - 6pm)\n    let newHour = Number(dateArr[4].split(':')[0]);\n    let workday = (dow === 'Mon' || dow === 'Tue' || dow === 'Wed' || dow === 'Thur' || dow === 'Fri');\n    let worktime = (newHour >= 8 && newHour <= 17);\n\n    function setClockColor(workday, worktime) {\n        if (workday && worktime) {\n            return {\n                color: \"#6BCD5B\"\n            }\n        } else {\n            return {\n                color: \"#A3A3A3\"\n            }\n        }\n    }\n    return (\n        <div className=\"lambda-clock\">\n            <p className='lambda-dayOfWeek' \n               style={setClockColor(workday, worktime)}>\n                   {dayOfWeek}\n            </p>\n            <p className='lambda-time' style={setClockColor(workday, worktime)}>\n                {lambdaTime}\n                <span style={setClockColor(workday, worktime)}>{ampm}</span>\n            </p>\n        </div>\n    )\n}\n\nexport default Clock;","// Import Dependencies\nimport React from 'react';\nimport styled from '../../node_modules/styled-components';\n\n// Import Components\nimport Clock from './Clock';\n\nfunction LSK_Header() {\n\n    const Line = styled.div`\n        \n    `\n\n    return (\n        <header>\n            <div className=\"header-title-container\">\n                <img src='lambda_logo.png' alt=\"Lambda FirstAid\" className=\"logo-icon\" />\n                <h1><span className='lambda-word'>Lambda</span> Survival Kit <span className='version'>(1.0.0)</span></h1>\n                <Line className='line'></Line>\n                <Clock />\n            </div>\n        </header>\n    )\n}\n\nexport default LSK_Header;","import React from 'react';\n\n// Import Font Awesome Dependencies\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faHtml5,\n         faCss3Alt,\n         faJsSquare} from '@fortawesome/free-brands-svg-icons';\n\nfunction LSK_Nav({handleBookmarks}) {\n\n    return(\n        <nav className=\"topNav-container\">\n                <div className=\"topNav-Item HTML\" onClick={event => handleBookmarks(event)}>\n                        <FontAwesomeIcon icon={faHtml5} \n                                        className=\"HTML\"\n                                        style={{\n                                                    color: \"#383651\",\n                                                    fontSize: \"30px\",\n                                                    textAlign: \"center\"\n                                                }}/>\n                        <h2 className=\"HTML\">HTML</h2>\n                </div>\n                <div className='topNav-line'></div>\n                <div className=\"topNav-Item CSS_Style\">\n                    <FontAwesomeIcon icon={faCss3Alt} \n                                     style={{\n                                        color: \"#383651\",\n                                        fontSize: \"30px\",\n                                        textAlign: \"center\"\n                                    }}/>\n                    <h2>CSS/UI</h2>\n                </div>\n                <div className='topNav-line'></div>\n                <div className=\"topNav-Item javascript\" >\n                    <FontAwesomeIcon icon={faJsSquare} \n                                     style={{\n                                        color: \"#383651\",\n                                        fontSize: \"30px\",\n                                        textAlign: \"center\"\n                                    }}/>\n                    <h2> Javscript</h2>\n                </div>\n                <div className='topNav-line'></div>\n                <div className=\"topNav-Item lambda\">\n                    <img src=\"lambda_logo.png\" alt=\"Lambda navigation\" />\n                    <h2>Lambda</h2>\n                </div>\n        </nav>\n    )\n}\n\nexport default LSK_Nav;","\nexport const BookmarkData = {\n    results: [\n      {\n        id: \"1\",\n        name: \"Google Fonts\",\n        category: \"HTML\",\n        subcategory: \"Essentials\",\n        url: \"https://fonts.google.com/\"\n      },\n      {\n        id: \"2\",\n        name: \"MDN HTML document\",\n        category: \"HTML\",\n        subcategory: \"Documentation\",\n        url: \"https://developer.mozilla.org/en-US/docs/Web/HTML\"\n      },\n      {\n        id: \"3\",\n        name: \"Eric Myer's Reset CSS\",\n        category: \"CSS-Style\",\n        subcategory: \"Essentials\",\n        url: \"https://meyerweb.com/eric/tools/css/reset/\"\n      },\n      {\n        id: \"4\",\n        name: \"Font Awesome\",\n        category: \"CSS-Style\",\n        subcategory: \"Essentials\",\n        url: \"https://fontawesome.com/icons?d=gallery\"\n      },\n      {\n        id: \"5\",\n        name: \"MDN CSS document\",\n        category: \"CSS-Style\",\n        subcategory: \"Documentation\",\n        url: \"https://developer.mozilla.org/en-US/docs/Web/JavaScript\"\n      },\n      {\n        id: \"6\",\n        name: \"MDN Javascript document\",\n        category: \"JS\",\n        subcategory: \"Documentation\",\n        url: \"https://developer.mozilla.org/en-US/docs/Web/JavaScript\"\n      },\n      {\n        id: \"7\",\n        name: \"React document\",\n        category: \"JS\",\n        subcategory: \"Documentation\",\n        url: \"reactjs.org\"\n      },\n      {\n        id: \"8\",\n        name: \"Green Sock\",\n        category: \"JS\",\n        subcategory: \"Essentials\",\n        url: \"https://greensock.com/\"\n      },\n      {\n        id: \"9\",\n        name: \"Training Kit\",\n        category: \"Lambda\",\n        subcategory: \"Daily\",\n        url: \"https://learn.lambdaschool.com/\"\n      },\n      {\n        id: \"10\",\n        name: \"Module Submission Form\",\n        category: \"Lambda\",\n        subcategory: \"Daily\",\n        url: \"https://auth.lambdaschool.com/sign-in/?redirect=https%3A%2F%2Fforms.lambdaschool.com%2Fmodule-retrospective&reason=auth_required\"\n      },\n      {\n        id: \"11\",\n        name: \"Lambda Calendar\",\n        category: \"Lambda\",\n        subcategory: \"Essentials\",\n        url: \"https://calendar.google.com/calendar/r?cid=bGFtYmRhc2Nob29sLmNvbV9nMDJtNTRlZTFxcWR1b2Rhbjdta2lqa3M5Y0Bncm91cC5jYWxlbmRhci5nb29nbGUuY29t\"\n      }\n    ]\n  }","import React from 'react';\nimport styled from 'styled-components';\n\nfunction Bookmark({bookmarkData}) {\n    console.log(bookmarkData);\n    return(\n        <div className=\"bookmark-container\">\n            <a href={bookmarkData.url} target=\"_blank\"><h2>{bookmarkData.name}</h2></a>\n            \n        </div>\n    )\n}\nexport default Bookmark;","// Import Dependencies\nimport React, {useState} from 'react';\nimport styled from 'styled-components';\n\n// Import Components\nimport LSK_Header from './components/LSK_Header';\nimport LSK_Nav from './components/LSK_Nav';\nimport {BookmarkData} from './BookmarkData';\nimport Bookmark from './components/Bookmark';\n\nfunction App() {\n\n  const [bookmarks, setBookmarks] = useState(BookmarkData.results);\n\n  console.log(bookmarks);\n\n  function handleBookmarks(event) {\n    console.log(event.target);\n\n  }\n\n  const BookmarksContainer = styled.div`\n  \n  `\n\n  return (\n    <div className=\"container\">\n      <LSK_Header />\n      <LSK_Nav handleBookmarks={handleBookmarks}/>\n      \n      {/* {Render Filtered Bookmarks} */}\n      <BookmarksContainer className=\"bookmark-container\">\n        {bookmarks.map(bookmarkData => {\n          return <Bookmark key={bookmarkData.id} bookmarkData={bookmarkData}/>\n        })}\n      </BookmarksContainer>\n    </div>\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}