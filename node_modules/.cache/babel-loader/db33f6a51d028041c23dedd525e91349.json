{"ast":null,"code":"import React from'react';function Clock(){// Convert local time -> UTC time -> SF time\nvar date=new Date();var utc_offset=date.getTimezoneOffset();date.setMinutes(date.getMinutes()+utc_offset);var sf_offset=8*60*-1;date.setMinutes(date.getMinutes()+sf_offset);// Set clock variables\nvar dateArr=date.toString().split(' ');// set Day of week\nvar dayOfWeek=dateArr[0];// set AM/PM and time\nvar dow=dateArr[0];var hour=Number(dateArr[4].split(':')[0]);var minutes=dateArr[4].split(':')[1];var lambdaTime;var ampm;if(hour>=0&&hour<12){ampm='AM';lambdaTime=\"\".concat(hour.toString(),\":\").concat(minutes,\" \");}else{hour=hour-12;ampm='PM';lambdaTime=\"\".concat(hour.toString(),\":\").concat(minutes);}// Change color of clock test based on time\n// Work day (Monday - Friday) / Work time (8am - 6pm)\nvar newHour=Number(dateArr[4].split(':')[0]);var workday=dow==='Mon'||dow==='Tue'||dow==='Wed'||dow==='Thur'||dow==='Fri';var worktime=newHour>=8&&newHour<=17;function setClockColor(workday,worktime){if(workday&&worktime){return{color:\"#6BCD5B\"};}else{return{color:\"#A3A3A3\"};}}return React.createElement(\"div\",{className:\"lambda-clock\"},React.createElement(\"p\",{className:\"lambda-dayOfWeek\",style:setClockColor(workday,worktime)},dayOfWeek),React.createElement(\"p\",{className:\"lambda-time\",style:setClockColor(workday,worktime)},lambdaTime,React.createElement(\"span\",{style:setClockColor(workday,worktime)},ampm)));}export default Clock;","map":{"version":3,"sources":["/Users/leegwangwoo/Desktop/Software_Dev/Personal_Projects/lambda-survival-kit/src/components/Clock.js"],"names":["React","Clock","date","Date","utc_offset","getTimezoneOffset","setMinutes","getMinutes","sf_offset","dateArr","toString","split","dayOfWeek","dow","hour","Number","minutes","lambdaTime","ampm","newHour","workday","worktime","setClockColor","color"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CAEA,QAASC,CAAAA,KAAT,EAAiB,CAEb;AACA,GAAIC,CAAAA,IAAI,CAAG,GAAIC,CAAAA,IAAJ,EAAX,CACA,GAAIC,CAAAA,UAAU,CAAGF,IAAI,CAACG,iBAAL,EAAjB,CACAH,IAAI,CAACI,UAAL,CAAgBJ,IAAI,CAACK,UAAL,GAAoBH,UAApC,EACA,GAAII,CAAAA,SAAS,CAAG,EAAI,EAAJ,CAAU,CAAC,CAA3B,CACAN,IAAI,CAACI,UAAL,CAAgBJ,IAAI,CAACK,UAAL,GAAoBC,SAApC,EAEA;AACA,GAAIC,CAAAA,OAAO,CAAGP,IAAI,CAACQ,QAAL,GAAgBC,KAAhB,CAAsB,GAAtB,CAAd,CACI;AACA,GAAIC,CAAAA,SAAS,CAAGH,OAAO,CAAC,CAAD,CAAvB,CAEA;AACA,GAAII,CAAAA,GAAG,CAAGJ,OAAO,CAAC,CAAD,CAAjB,CACA,GAAIK,CAAAA,IAAI,CAAGC,MAAM,CAACN,OAAO,CAAC,CAAD,CAAP,CAAWE,KAAX,CAAiB,GAAjB,EAAsB,CAAtB,CAAD,CAAjB,CACA,GAAIK,CAAAA,OAAO,CAAGP,OAAO,CAAC,CAAD,CAAP,CAAWE,KAAX,CAAiB,GAAjB,EAAsB,CAAtB,CAAd,CACA,GAAIM,CAAAA,UAAJ,CACA,GAAIC,CAAAA,IAAJ,CACA,GAAIJ,IAAI,EAAI,CAAR,EAAaA,IAAI,CAAG,EAAxB,CAA4B,CACxBI,IAAI,CAAG,IAAP,CACAD,UAAU,WAAMH,IAAI,CAACJ,QAAL,EAAN,aAAyBM,OAAzB,KAAV,CACH,CAHD,IAGO,CACHF,IAAI,CAAGA,IAAI,CAAG,EAAd,CACAI,IAAI,CAAG,IAAP,CACAD,UAAU,WAAMH,IAAI,CAACJ,QAAL,EAAN,aAAyBM,OAAzB,CAAV,CACH,CAEL;AACA;AACA,GAAIG,CAAAA,OAAO,CAAGJ,MAAM,CAACN,OAAO,CAAC,CAAD,CAAP,CAAWE,KAAX,CAAiB,GAAjB,EAAsB,CAAtB,CAAD,CAApB,CACA,GAAIS,CAAAA,OAAO,CAAIP,GAAG,GAAK,KAAR,EAAiBA,GAAG,GAAK,KAAzB,EAAkCA,GAAG,GAAK,KAA1C,EAAmDA,GAAG,GAAK,MAA3D,EAAqEA,GAAG,GAAK,KAA5F,CACA,GAAIQ,CAAAA,QAAQ,CAAIF,OAAO,EAAI,CAAX,EAAgBA,OAAO,EAAI,EAA3C,CAEA,QAASG,CAAAA,aAAT,CAAuBF,OAAvB,CAAgCC,QAAhC,CAA0C,CACtC,GAAID,OAAO,EAAIC,QAAf,CAAyB,CACrB,MAAO,CACHE,KAAK,CAAE,SADJ,CAAP,CAGH,CAJD,IAIO,CACH,MAAO,CACHA,KAAK,CAAE,SADJ,CAAP,CAGH,CACJ,CACD,MACI,4BAAK,SAAS,CAAC,cAAf,EACI,yBAAG,SAAS,CAAC,kBAAb,CACG,KAAK,CAAED,aAAa,CAACF,OAAD,CAAUC,QAAV,CADvB,EAEQT,SAFR,CADJ,CAKI,yBAAG,SAAS,CAAC,aAAb,CAA2B,KAAK,CAAEU,aAAa,CAACF,OAAD,CAAUC,QAAV,CAA/C,EACKJ,UADL,CAEI,4BAAM,KAAK,CAAEK,aAAa,CAACF,OAAD,CAAUC,QAAV,CAA1B,EAAgDH,IAAhD,CAFJ,CALJ,CADJ,CAYH,CAED,cAAejB,CAAAA,KAAf","sourcesContent":["import React from 'react';\n\nfunction Clock() {\n\n    // Convert local time -> UTC time -> SF time\n    var date = new Date();    \n    var utc_offset = date.getTimezoneOffset();\n    date.setMinutes(date.getMinutes() + utc_offset);\n    var sf_offset = 8 * 60 * (-1);\n    date.setMinutes(date.getMinutes() + sf_offset);\n    \n    // Set clock variables\n    let dateArr = date.toString().split(' ');\n        // set Day of week\n        let dayOfWeek = dateArr[0];\n\n        // set AM/PM and time\n        let dow = dateArr[0];\n        let hour = Number(dateArr[4].split(':')[0]);\n        let minutes = dateArr[4].split(':')[1];\n        let lambdaTime;\n        let ampm;\n        if (hour >= 0 && hour < 12) {\n            ampm = 'AM';\n            lambdaTime = `${hour.toString()}:${minutes} `;\n        } else {\n            hour = hour - 12;\n            ampm = 'PM';\n            lambdaTime = `${hour.toString()}:${minutes}`;\n        }\n\n    // Change color of clock test based on time\n    // Work day (Monday - Friday) / Work time (8am - 6pm)\n    let newHour = Number(dateArr[4].split(':')[0]);\n    let workday = (dow === 'Mon' || dow === 'Tue' || dow === 'Wed' || dow === 'Thur' || dow === 'Fri');\n    let worktime = (newHour >= 8 && newHour <= 17);\n\n    function setClockColor(workday, worktime) {\n        if (workday && worktime) {\n            return {\n                color: \"#6BCD5B\"\n            }\n        } else {\n            return {\n                color: \"#A3A3A3\"\n            }\n        }\n    }\n    return (\n        <div className=\"lambda-clock\">\n            <p className='lambda-dayOfWeek' \n               style={setClockColor(workday, worktime)}>\n                   {dayOfWeek}\n            </p>\n            <p className='lambda-time' style={setClockColor(workday, worktime)}>\n                {lambdaTime}\n                <span style={setClockColor(workday, worktime)}>{ampm}</span>\n            </p>\n        </div>\n    )\n}\n\nexport default Clock;"]},"metadata":{},"sourceType":"module"}