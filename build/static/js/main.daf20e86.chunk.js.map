{"version":3,"sources":["components/LSK_Header.js","components/LSK_Nav.js","App.js","serviceWorker.js","index.js"],"names":["LSK_Header","Line","styled","div","className","src","alt","LSK_Nav","console","log","faHtml5","icon","faCss3Alt","faJsSquare","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qYAsBeA,MAnBf,WAEI,IAAMC,EAAOC,IAAOC,IAAV,KAKV,OACI,gCACI,yBAAKC,UAAU,0BACX,yBAAKC,IAAI,kBAAkBC,IAAI,kBAAkBF,UAAU,cAC3D,4BAAI,0BAAMA,UAAU,eAAhB,UAAJ,iBAA6D,0BAAMA,UAAU,WAAhB,aAEjE,kBAACH,EAAD,CAAMG,UAAU,SAChB,yBAAKA,UAAU,sB,cCmBZG,MA5Bf,WAGI,OADAC,QAAQC,IAAIC,KAER,yBAAKN,UAAU,oBACP,yBAAKA,UAAU,oBACX,kBAAC,IAAD,CAAiBO,KAAMD,MACvB,qCAEJ,yBAAKN,UAAU,gBACf,yBAAKA,UAAU,yBACX,kBAAC,IAAD,CAAiBO,KAAMC,MACvB,uCAEJ,yBAAKR,UAAU,gBACf,yBAAKA,UAAU,0BACX,kBAAC,IAAD,CAAiBO,KAAME,MACvB,2CAEJ,yBAAKT,UAAU,gBACf,yBAAKA,UAAU,sBACX,yBAAKC,IAAI,kBAAkBC,IAAI,sBAC/B,yCCbLQ,MAVf,WACE,OACE,yBAAKV,UAAU,aACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCCcW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.daf20e86.chunk.js","sourcesContent":["import React from 'react';\nimport styled from '../../node_modules/styled-components';\n\nfunction LSK_Header() {\n\n    const Line = styled.div`\n        width: 100%;\n        border: 2px solid red;\n    `\n\n    return (\n        <header>\n            <div className=\"header-title-container\">\n                <img src='lambda_logo.png' alt=\"Lambda FirstAid\" className=\"logo-icon\" />\n                <h1><span className='lambda-word'>Lambda</span> Survival Kit <span className='version'>(1.0.0)</span></h1>\n            </div>\n            <Line className='line'></Line>\n            <div className=\"clock-container\"></div>\n        </header>\n    )\n}\n\nexport default LSK_Header;","import React from 'react';\n\n// Import Font Awesome Dependencies\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faHtml5,\n         faCss3Alt,\n         faJsSquare} from '@fortawesome/free-brands-svg-icons';\n\nfunction LSK_Nav() {\n\n    console.log(faHtml5)\n    return(\n        <div className=\"topNav-container\">\n                <div className=\"topNav-Item HTML\">\n                    <FontAwesomeIcon icon={faHtml5} />\n                    <h2>HTML</h2>\n                </div>\n                <div className='topNav-line'></div>\n                <div className=\"topNav-Item CSS_Style\">\n                    <FontAwesomeIcon icon={faCss3Alt} />\n                    <h2>CSS/UI</h2>\n                </div>\n                <div className='topNav-line'></div>\n                <div className=\"topNav-Item javascript\">\n                    <FontAwesomeIcon icon={faJsSquare} />\n                    <h2> Javscript</h2>\n                </div>\n                <div className='topNav-line'></div>\n                <div className=\"topNav-Item lambda\">\n                    <img src=\"lambda_logo.png\" alt=\"Lambda navigation\" />\n                    <h2>Lambda</h2>\n                </div>\n        </div>\n    )\n}\n\nexport default LSK_Nav;","// Import Dependencies\nimport React from 'react';\n\n// Import Components\nimport LSK_Header from './components/LSK_Header';\nimport LSK_Nav from './components/LSK_Nav';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <LSK_Header />\n      <LSK_Nav />\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}